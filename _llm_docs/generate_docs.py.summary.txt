# HASH: 72265086de5dda592119e82b938c2eb485c7553e15a88cadaa8646028e902f8f
File Path: <unspecified>

Overall Purpose: This script generates a summary of the content within a specified directory, including subdirectories and source files. It computes hashes for each file and directory to track changes, and uses an external language model (LLM) to generate text summaries.

Classes, Structs, or Interfaces:
- None (this script does not define any classes, structs, or interfaces)

Methods:
1. `compute_directory_hash(subdir_hashes, file_hashes)` (lines 7-14): Computes a combined hash for a directory from its subdirectory and file hashes.
2. `read_directory_summary_hash(summary_path: Path)` (lines 23-38): Reads the hash from the first line of a directory summary file, if present.
3. `compute_file_hash(content: str)` (lines 41-46): Computes SHA256 hash of file content as a hex string.
4. `read_summary_hash(summary_path: Path)` (lines 49-60): Reads the hash from the first line of a summary file, if present.
5. `should_ignore_dir(dirname: str)` (lines 72-73): Checks if a directory should be ignored based on a predefined list of directories to ignore.
6. `is_source_file(filename: str)` (lines 77-80): Checks if a file has a specified extension that is considered "source code".
7. `ensure_docs_dir(path: Path)` (lines 84-89): Creates or returns an existing _llm_docs directory at the given path.
8. `process_directory(dir_path: Path)` (lines 92-164): Recursively processes a directory by summarizing subdirectories and files, then combining them to generate a summary for the entire directory.
9. `main()` (lines 170-183): Initializes the script with a specified root directory and calls `process_directory` on it.

The script does not define any properties for classes or structs. Each method performs a specific function related to computing hashes, reading summaries, checking if directories or files should be ignored, creating _llm_docs directories, processing directories recursively, and initializing the script.